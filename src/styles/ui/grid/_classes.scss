// outputs CSS classes for the grid.
@mixin ui-grid(
    $row: 'row',
    $column: 'column',
    $column-row: 'column-row',
    $gutter: 'gutter',
    $push: 'push',
    $pull: 'pull',
    $center: 'centered',
    $uncenter: 'uncentered',
    $collapse: 'collapse',
    $skinny: 'skinny',
    $tie: 'tie',
    $uncollapse: 'uncollapse',
    $offset: 'offset',
    $end: 'end',
    $expanded: 'expanded',
    $block: 'block'
) {
    // row
    .#{$row} {
        @include grid-row;


        // collapsing
        &.#{$collapse} {
            > .#{$column} {
                @include grid-col-collapse;
            }
        }


        &.#{$skinny} {
            margin-left: -1rem;
            margin-right: -1rem;
            // > .#{$column} {
            //     &:first-child {
            //         padding-left: 0;
            //     }
            //     &:last-child {
            //         padding-right: 0;
            //     }
            // }
        }


        &.#{$tie} {
            margin-left: 0 !important;
            margin-right: 0 !important;
            @include padding(0);
            > .#{$column} {
                @include margin(0);
                @include padding(0);
            }
        }


        // nesting
        & .#{$row} {
            @include grid-row-nest($grid-column-gutter);
            &.#{$collapse} {
                @include padding-h(0);
                // margin-right: 0;
                // margin-left: 0;
            }
        }


        // expanded (full-width) row
        &.#{$expanded} {
            @include grid-row-size(expand);
            .#{$row} {
                @include margin-h(auto);
                // margin-right: auto;
                // margin-left: auto;
            }
        }



        &:not(.#{$expanded}) .#{$row} {
            @include grid-row-size(expand);
        }


        // setting for breakpoints
        @if type-of($grid-column-gutter) == 'map' {
          
            @each $breakpoint, $value in $grid-column-gutter {
                &.#{$gutter}-#{$breakpoint} {
                    > .#{$column} {
                        @include grid-col-gutter($value);
                    }
                }
            }
        }
    }



    // column
    .#{$column} {
        @include grid-col;
        @if $grid-column-align-edge {
            &.#{$end} {
                @include grid-col-end;
            }
        }
    }



    // column row
    .#{$column}.#{$row}.#{$row} {
        float: none;
    }


    // to properly nest a column row, padding and margin is removed
    .#{$row} .#{$column}.#{$row}.#{$row} {
        @include margin-h(0);
        @include padding-h(0);
        // margin-right: 0;
        // margin-left: 0;
        // padding-right: 0;
        // padding-left: 0;
    }


    @include each-breakpoint {
        @for $i from 1 through $grid-column-count {
            

            // column width
            .#{$size}-#{$i} {
              @include grid-col-size($i);
            }

            
            // source ordering
            @if $i < $grid-column-count {
                .#{$size}-#{$push}-#{$i} {
                    @include grid-col-pos($i);
                } 
                .#{$size}-#{$pull}-#{$i} {
                    @include grid-col-pos(-$i);
                }
            }

            // Offsets
            $o: $i - 1;


            .#{$size}-#{$offset}-#{$o} {
                @include grid-col-off($o);
            }
        }


        // block grid
        @for $i from 1 through $block-grid-max {
            .#{$size}-up-#{$i} {
                @include grid-layout($i, '.#{$column}');
            }
        }


        // responsive collapsing
        .#{$size}-#{$collapse} {
            > .#{$column} { @include grid-col-collapse; }
            .#{$row} {
                @include margin-h(0);
                // margin-right: 0;
                // margin-left: 0;
            }
        }



        .#{$expanded}.#{$row} .#{$size}-#{$collapse}.#{$row} {
            @include margin-h(0);
            // margin-right: 0;
            // margin-left: 0;
        }


        .#{$size}-#{$uncollapse} {
            > .#{$column} { @include grid-col-gutter($size); }
        }


        // positioning
        .#{$size}-#{$center} {
            @include grid-col-pos(center);
        }


        // gutter adjustment
        .#{$size}-#{$uncenter},
        .#{$size}-#{$push}-0,
        .#{$size}-#{$pull}-0 {
            @include grid-col-unpos;
        }
    }


    // block grid columns
    .#{$column}-#{$block} {
      @include grid-column-margin;
    }


    @if $column == 'column' and has-value($grid-column-alias) {
        .#{$grid-column-alias} {
            // sass-lint:disable-block placeholder-in-extend
            @extend .column;
        }
    }
}