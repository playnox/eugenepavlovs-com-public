// sizes child elements so that `$n` number of items appear on each row.
@mixin grid-layout(
    $n,
    $selector: '.column',
    $gutter: null
) {
    & > #{$selector} {
        float: $global-left;
        width: percentage(1/$n);

        
        // if a $gutter value is passed
        @if($gutter) {
            

            // gutters
            @if type-of($gutter) == 'map' {
                @each $breakpoint, $value in $gutter {
                    $padding: rem-calc($value) / 2;

                    @include breakpoint($breakpoint) {
                        @include padding-h($padding);
                        // padding-right: $padding;
                        // padding-left: $padding;
                    }
                }
            }
            @else if type-of($gutter) == 'number' and strip-unit($gutter) > 0 {
                $padding: rem-calc($gutter) / 2;
                @include padding-h($padding);
                // padding-right: $padding;
                // padding-left: $padding;
            }
        }
        &:nth-of-type(1n) {
            clear: none;
        }
        &:nth-of-type(#{$n}n+1) {
            clear: both;
        }
        &:last-child {
            float: $global-left;
        }
    }
}


// adds extra CSS to block grid children so the last items in the row center automatically.
@mixin grid-layout-center-last($n) {
    @for $i from 1 to $n {
        @if $i == 1 {
            &:nth-child(#{$n}n+1):last-child {
                margin-left: (100 - 100/$n * $i) / 2 * 1%;
            }
        }
        @else {
            &:nth-child(#{$n}n+1):nth-last-child(#{$i}) {
                margin-left: (100 - 100/$n * $i) / 2 * 1%;
            }
        }
    }
}