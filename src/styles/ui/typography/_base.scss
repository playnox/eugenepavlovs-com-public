// base typography
$header-font-family: $body-font-family !default;
$header-font-weight: $global-weight-normal !default;
$header-font-style: normal !default;
$font-family-monospace: Consolas, 'Liberation Mono', Courier, monospace !default;
$header-color: inherit !default;
$header-lineheight: 1.4 !default;
$header-margin-bottom: 0.5rem !default;
$header-styles: (
    small: (
        'h1': ('font-size': 24),
        'h2': ('font-size': 20),
        'h3': ('font-size': 19),
        'h4': ('font-size': 18),
        'h5': ('font-size': 17),
        'h6': ('font-size': 16),
    ),
    medium: (
        'h1': ('font-size': 48),
        'h2': ('font-size': 40),
        'h3': ('font-size': 31),
        'h4': ('font-size': 25),
        'h5': ('font-size': 20),
        'h6': ('font-size': 16),
    ),
) !default;


// $header-styles map is built from $header-sizes in order to ensure downward compatibility
@function build_from_header-sizes($header-sizes) {
    @warn 'Note, that $header-sizes has been replaced with $header-styles. $header-sizes still works, but it is going to be depreciated.';
    $header-styles: ();
    @each $size, $headers in $header-sizes {
        $header-map: ();
        @each $header, $font-size in $headers {
            $header-map: map-merge($header-map, ($header: ('font-size': $font-size)));  
        }
        $header-styles: map-merge($header-styles, ($size: $header-map));
    }
    @return $header-styles;
}


// if it exists $headers-sizes is used to build $header-styles. See the documentation.
@if variable-exists(header-sizes) {
    $header-styles: build_from_header-sizes($header-sizes);
}


// font sizes (classes)
$global-font-sizes: (
    tiny: 0.65rem,
    small: 0.85rem,
    default: 1rem,
    large: 1.25rem,
    xlarge: 1.75rem,
    hero: 2.5rem
) !default;


// creates classes out of global font sizes
@mixin make-font-size-classes() {
    @each $size, $value in $global-font-sizes {
        .text-#{$size} {
            font-size: $value;
        }
    }
    .text-xxlarge {
        line-height: 1.3;
    }
    .text-jumbo {
        line-height: 1.2;
    }
    .text-hero {
        line-height: 1;
    }
}



// text rendering method of headers.
$header-text-rendering: optimizeLegibility !default;
$small-font-size: 80% !default;
$header-small-font-color: get-color(secondary) !default;
$paragraph-lineheight: 1.6 !default;
$paragraph-margin-bottom: 1rem !default;
$paragraph-text-rendering: optimizeLegibility !default;
$paragraph-font-weight: normal !default;
$code-color: get-color(dark) !default;
$code-font-family: $font-family-monospace !default;
$code-font-weight: $global-weight-normal !default;
$code-background: get-color(secondary) !default;
$code-border: 1px solid get-color(secondary) !default;
$code-padding: rem-calc(2 5 1) !default;
$anchor-color: get-color(primary) !default;
$anchor-color-hover: scale-color($anchor-color, $lightness: -14%) !default;
$anchor-text-decoration: none !default;
$anchor-text-decoration-hover: none !default;
$hr-width: $global-width !default;
$hr-border: 1px solid get-color(secondary) !default;
$hr-margin: rem-calc(20) auto !default;
$list-lineheight: $paragraph-lineheight !default;
$list-margin-bottom: $paragraph-margin-bottom !default;
$list-style-type: disc !default;
$list-style-position: outside !default;
$list-side-margin: 1.25rem !default;
$list-nested-side-margin: 1.25rem !default;
$defnlist-margin-bottom: 1rem !default;
$defnlist-term-weight: $global-weight-bold !default;
$defnlist-term-margin-bottom: 0.3rem !default;
$blockquote-color: get-color(dark) !default;
$blockquote-padding: rem-calc(9 20 0 19) !default;
$blockquote-border: 1px solid get-color(secondary) !default;
$cite-font-size: rem-calc(13) !default;
$cite-color: get-color(dark) !default;
$cite-pseudo-content: '\2014 \0020' !default;
$keystroke-font: $font-family-monospace !default;
$keystroke-color: get-color(dark) !default;
$keystroke-background: get-color(secondary) !default;
$keystroke-padding: rem-calc(2 4 0) !default;
$keystroke-radius: $global-radius !default;
$abbr-underline: 1px dotted get-color(dark) !default;


// mixin
@mixin ui-typography-base {
    div,
    dl,
    dt,
    dd,
    ul,
    ol,
    li,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    pre,
    form,
    p,
    blockquote,
    th,
    td {
        margin: 0;
        padding: 0;
    }

    
    // size classses
    @include make-font-size-classes;



    // paragraphs
    p {
        margin-bottom: $paragraph-margin-bottom;
        font-size: inherit;
        line-height: $paragraph-lineheight;
        text-rendering: $paragraph-text-rendering;
        font-weight: $paragraph-font-weight;
    }


    // emphasized text
    em,
    i {
        font-style: italic;
        line-height: inherit;
    }


    // strong text
    strong,
    b {
        font-weight: $global-weight-bold;
        line-height: inherit;
    }


    // small text
    small {
        font-size: $small-font-size;
        line-height: inherit;
    }


    // headings
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: $header-font-family;
        font-style: $header-font-style;
        font-weight: $header-font-weight;
        color: $header-color;
        text-rendering: $header-text-rendering;

        small {
            line-height: 0;
            color: $header-small-font-color;
        }
    }


    // heading styles
    @each $size, $headers in $header-styles {
        @include breakpoint($size) {
            @each $header, $header-defs in $headers {
                $font-size-temp: 1rem;
                #{$header} {
                    @if map-has-key($header-defs, font-size) {
                        $font-size-temp: rem-calc(map-get($header-defs, font-size));
                        font-size: $font-size-temp;
                    }
                    @else if map-has-key($header-defs, fs) {
                        $font-size-temp: rem-calc(map-get($header-defs, fs));
                        font-size: $font-size-temp;
                    }
                    @else if $size == $zero-breakpoint {
                        font-size: $font-size-temp;
                    }
                    @if map-has-key($header-defs, line-height) {
                        line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);
                    }
                    @else if map-has-key($header-defs, lh) {
                        line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);
                    }
                    @else if $size == $zero-breakpoint {
                        line-height: unitless-calc($header-lineheight, $font-size-temp);
                    }
                    @if map-has-key($header-defs, margin-top) {
                        margin-top: rem-calc(map-get($header-defs, margin-top));
                    }
                    @else if map-has-key($header-defs, mt) {
                        margin-top: rem-calc(map-get($header-defs, mt));
                    }
                    @else if $size == $zero-breakpoint {
                        margin-top: 0;
                    }
                    @if map-has-key($header-defs, margin-bottom) {
                        margin-bottom: rem-calc(map-get($header-defs, margin-bottom));
                    }
                    @else if map-has-key($header-defs, mb) {
                        margin-bottom: rem-calc(map-get($header-defs, mb));
                    }
                    @else if $size == $zero-breakpoint {
                        margin-bottom: rem-calc($header-margin-bottom);
                    }
                }
            }
        }
    }


    // Links
    a {
        line-height: inherit;
        color: $anchor-color;
        text-decoration: $anchor-text-decoration;
        cursor: pointer;
        &:hover,
        &:focus {
            color: $anchor-color-hover;
            @if $anchor-text-decoration-hover != $anchor-text-decoration {
                text-decoration: $anchor-text-decoration-hover;
            }
        }
        img {
            border: 0;
        }
    }

    // horizontal rule
    hr {
        clear: both;
        max-width: $hr-width;
        height: 0;
        margin: $hr-margin;
        border-top: 0;
        border-right: 0;
        border-bottom: $hr-border;
        border-left: 0;
    }


    // lists
    ul,
    ol,
    dl {
        margin-bottom: $list-margin-bottom;
        list-style-position: $list-style-position;
        line-height: $list-lineheight;
    }


    // list items
    li {
        font-size: inherit;
    }


    // unordered lists
    ul {
        margin-#{$global-left}: $list-side-margin;
        list-style-type: $list-style-type;
    }


    // ordered lists
    ol {
        margin-#{$global-left}: $list-side-margin;
    }


    // nested unordered/ordered lists
    ul,
    ol {
        & & {
            margin-#{$global-left}: $list-nested-side-margin;
            margin-bottom: 0;
        }
    }


    // definition lists
    dl {
        margin-bottom: $defnlist-margin-bottom;
        dt {
            margin-bottom: $defnlist-term-margin-bottom;
           font-weight: $defnlist-term-weight;
        }
    }


    // blockquotes
    blockquote {
        margin: 0 0 $paragraph-margin-bottom;
        padding: $blockquote-padding;
        border-#{$global-left}: $blockquote-border;
        &,
        p {
            line-height: $paragraph-lineheight;
            color: $blockquote-color;
        }
    }


    // citations
    cite {
        display: block;
        font-size: $cite-font-size;
        color: $cite-color;
        &:before {
            content: $cite-pseudo-content;
        }
    }


    // abbreviations
    abbr {
        border-bottom: $abbr-underline;
        color: $body-font-color;
        cursor: help;
    }


    // figures
    figure {
        margin: 0;
    }
    

    // code
    code {
        padding: $code-padding;
        border: $code-border;
        background-color: $code-background;
        font-family: $code-font-family;
        font-weight: $code-font-weight;
        color: $code-color;
    }


    // keystrokes
    kbd {
        margin: 0;
        padding: $keystroke-padding;
        background-color: $keystroke-background;
        font-family: $keystroke-font;
        color: $keystroke-color;
        @if has-value($keystroke-radius) {
            border-radius: $keystroke-radius;
        }
    }
}
