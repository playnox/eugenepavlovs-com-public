$breakpoints: (
    small: 0,
    medium: 640px,
    large: 1024px,
    xlarge: 1200px,
    xxlarge: 1440px,
) !default;
$print-breakpoint: large !default;
$zero-breakpoint: small !default;
$breakpoints-keys: map-to-list($breakpoints, 'keys');



@if nth(map-values($breakpoints), 1) != 0 {
    @error 'Your smallest breakpoint (defined in $breakpoints) must be set to "0".';
}
@else {
    $zero-breakpoint: nth(map-keys($breakpoints), 1);
}
$breakpoint-classes: (small medium large) !default;


// generates a media query string matching the input value.
@function breakpoint($val: $zero-breakpoint) {
    

    // size or keyword
    $bp: nth($val, 1);
    // value for max-width media queries
    $bp-max: 0;
    // direction of media query (up, down, or only)
    $dir: if(length($val) > 1, nth($val, 2), up);
    // eventual output
    $str: '';
    // is it a named media query?
    $named: false;


    // orientation media queries have a unique syntax
    @if $bp == 'landscape' or $bp == 'portrait' {
        @return '(orientation: #{$bp})';
    }
    @else if $bp == 'retina' {
        @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
    }


    // top: ;ry to pull a named breakpoint out of the $breakpoints map
    @if type-of($bp) == 'string' {
        @if map-has-key($breakpoints, $bp) {
            @if $dir == 'only' or $dir == 'down' {
                $bp-max: map-next($breakpoints, $bp);
            }
            $bp: map-get($breakpoints, $bp);
            $named: true;
        }
        @else {
            $bp: 0;
            @warn 'breakpoint(): "#{$val}" is not defined in your $breakpoints setting.';
        }
    }


    // convert any pixel, rem, or unitless value to em
    $bp: bp-to-em($bp);
    @if $bp-max {
        $bp-max: bp-to-em($bp-max) - (1/16);
    }


    // conditions to skip media query creation
    @if $bp > 0em or $dir == 'only' or $dir == 'down' {
        // only ranges use the format `(min-width: n) and (max-width: n)`
        @if $dir == 'only' {
            // only named media queries can have an "only" range
            @if $named == true {
                // only use "min-width" if the floor is greater than 0
                @if $bp > 0em {
                    $str: $str + '(min-width: #{$bp})';

                    // only add "and" to the media query if there's a ceiling
                    @if $bp-max != null {
                        $str: $str + ' and ';
                    }
                }

                // Only use "max-width" if there's a ceiling
                @if $bp-max != null {
                    $str: $str + '(max-width: #{$bp-max})';
                }
            }
            @else {
              @warn 'breakpoint(): Only named media queries can have an `only` range.';
            }
        }

        // `down` ranges use the format `(max-width: n)`
        @else if $dir == 'down' {
            $max: if($named, $bp-max, $bp);


            // skip media query creation if input value is exactly "0 down", unless the function was called as "small down", in which case it's just "small only"
            @if $named or $bp > 0em {
                @if $max != null {
                    $str: $str + '(max-width: #{$max})';
                }
            }
        }


        // up ranges use the format (min-width: n)
        @else if $bp > 0em {
            $str: $str + '(min-width: #{$bp})';
        }
    }
    @return $str;
}

// wraps a media query around the content you put inside the mixin.
@mixin breakpoint($value) {
    $str: breakpoint($value);
    $bp: index($breakpoints-keys, $value);
    $pbp: index($breakpoints-keys, $print-breakpoint);


    // if $str is still an empty string, no media query is needed
    @if $str == '' {
        @content;
    }


    // otherwise, wrap the content in a media query
    @else {


        // for named breakpoints less than or equal to $print-breakpoint, add print to the media types
        @if $bp != null and $bp <= $pbp {
            @media print, screen and #{$str} {
                @content;
             }
        }
        @else {
            @media screen and #{$str} {
                @content;
            }
        }
    }
}


// convers the breakpoints map to a URL-encoded string, like this: 'key1=value1&key2=value2'.
// @function bp-serialize($map) {
//     $str: '';
//     @each $key, $value in $map {
//         $str: $str + $key + '=' + bp-to-em($value) + '&';
//     }
//     $str: str-slice($str, 1, -2);

//     @return $str;
// }



// find the next key in a map.
@function map-next($map, $key) {


    // store the keys of the map as a list
    $values: map-keys($map);
    $i: 0;


    // if the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map
    @if (map-has-key($map, $key)) {
        $i: index($values, $key) + 1;
    }


    // if the key doesn't exist, or it's the last key in the map, return null
    @if ($i > length($map) or $i == 0) {
        @return null;
    }


    // otherwise, return the value
    @else {
        @return map-get($map, nth($values, $i));
    }

}


// get a value for a breakpoint from a responsive config map or single value.
@function get-bp-val($map, $value) {

  
    // if the given map is a single value, return it
    @if type-of($map) == 'number' {
      @return $map;
    }


    // check if the breakpoint name exists globally
    @if not map-has-key($breakpoints, $value) {
      @return null;
    }


    // check if the breakpoint name exists in the local config map
    @else if map-has-key($map, $value) {
        // if it does, just return the value
        @return map-get($map, $value);
    }


    // otherwise, find the next lowest breakpoint and return that value
    @else {
        $anchor: null;
        $found: false;
        @each $key, $val in $breakpoints {
            @if not $found {
                @if map-has-key($map, $key) {
                    $anchor: $key;
                }
                @if $key == $value {
                    $found: true;
                }
            }
        }
        @return map-get($map, $anchor);
    }
}
@if map-has-key($breakpoints, small) {
    $small-up: screen;
    $small-only: unquote('screen and #{breakpoint(small only)}');
}
@if map-has-key($breakpoints, medium) {
    $medium-up: unquote('screen and #{breakpoint(medium)}');
    $medium-only: unquote('screen and #{breakpoint(medium only)}');
}
@if map-has-key($breakpoints, large) {
    $large-up: unquote('screen and #{breakpoint(large)}');
    $large-only: unquote('screen and #{breakpoint(large only)}');
}
@if map-has-key($breakpoints, xlarge) {
    $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');
    $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');
}
@if map-has-key($breakpoints, xxlarge) {
    $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');
}