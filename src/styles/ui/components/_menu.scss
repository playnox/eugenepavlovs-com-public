// settings
$menu-margin: 0 !default;
$menu-margin-nested: 1rem !default;
$menu-item-padding: 0.7rem 1rem !default;
$menu-icon-spacing: 0.25rem !default;
$menu-item-color-active: get-color(snow) !default;
$menu-item-background-active: get-color(primary) !default;
$menu-item-background-hover: get-color(secondary) !default;
$menu-border: get-color(secondary) !default;


// creates the base styles for a Menu.
@mixin menu-base {
    margin: $menu-margin;
    list-style-type: none;
    @if $global-flexbox {
        display: flex;
        flex-wrap: nowrap;
        align-items: center;
        width: 100%;
    }


    // list items are table cell to allow for vertical alignment
    > li {
        @include disable-mouse-outline;
        @if $global-flexbox {
            flex: 0 0 auto;
        }
        @else {
            display: table-cell;
            vertical-align: middle;
        }
    }


    // reset line height to make the height of the overall item easier to calculate
    > li > a {
        display: block;
        &:not(.button) {
            padding: $menu-item-padding;
            line-height: 1;
        }
    }


    // reset styles of inner elements
    input,
    select,
    a,
    button {
        margin-bottom: 0;
    }
}


// expands the items of a Menu, so each item is the same width.
@mixin menu-expand {
    @if $global-flexbox {
        > li {
            flex: 1 1 0px; // sass-lint:disable-line zero-unit
        }
    }
    @else {
        display: table;
        width: 100%;
        table-layout: fixed;
    }
    > li:first-child:last-child {
        width: 100%;
    }
}


// sets the direction of a menu.
@mixin menu-direction($dir: horizontal) {
    @if $dir == horizontal {
        @if $global-flexbox {
            flex-wrap: nowrap;
            > li {
              flex: 0 0 auto;
            }
        }
        @else {
            > li {
                display: table-cell;
            }
        }
    }
    @else if $dir == vertical {
        @if $global-flexbox {
            flex-wrap: wrap;
            > li {
                flex: 0 0 100%;
                max-width: 100%;
                > a {
                    justify-content: flex-start;
                    align-items: flex-start;
                }
            }
        }
        @else {
            > li {
                display: block;
            }
        }
    }
    @else {
        @warn 'The direction used for menu-direction() must be horizontal or vertical.';
    }
}


// creates a simple Menu, which has no padding or hover state.
@mixin menu-simple($dir: $global-left) {
    li {
        display: inline-block;
        vertical-align: top;
        line-height: 1;
    }
    a {
        padding: 0;
    }
    @if $dir != null {
        @include menu-simple-direction($dir);
    }
}


// direction modifier for a simple menu
@mixin menu-simple-direction($dir: $global-left) {
    $no-margin-dir: $dir;
    $margin-dir: direction-opposite($dir);
    li {
        margin-#{$no-margin-dir}: 0;
        margin-#{$margin-dir}: get-side($menu-item-padding, $margin-dir);
    }
}


// adds styles for a nested menu
@mixin menu-nested($margin: $menu-margin-nested) {
    margin-#{$global-left}: $margin;
}


// adds support for icons to menu items.
@mixin menu-icons($position: side, $base: true) {
    @if $base {
        @if $global-flexbox {
            > li > a {
              display: flex;
            }
        }
        @else {
            > li > a {
                img,
                i,
                svg {
                    vertical-align: middle;
                    + span {
                        vertical-align: middle;
                    }
                }
            }
        }
    }
    @if $position == side {
        > li > a {
            @if $global-flexbox {
                flex-flow: row nowrap;
            }

            img,
            i,
            svg {
                margin-#{$global-right}: $menu-icon-spacing;

                @if not $global-flexbox {
                    display: inline-block;
                }
            }
        }
    }
    @else if $position == top {
        > li > a {
            @if $global-flexbox {
                flex-flow: column nowrap;
            }
            @else {
                text-align: center;
            }

            img,
            i,
            svg {
                @if not $global-flexbox {
                    display: block;
                    margin: 0 auto $menu-icon-spacing;
                }
                @else {
                    align-self: stretch;
                    margin-bottom: $menu-icon-spacing;
                    text-align: center;
                }
            }
        }
    }
}


@mixin menu-text {
    @include padding-v(0);
    padding: $menu-item-padding;
    font-weight: bold;
    line-height: 1;
    color: inherit;
}


@mixin ui-menu {
    .menu {
        @include menu-base;
        @include menu-icons;


        // default orientation: horizontal
        &, &.horizontal {
            @include menu-direction(horizontal);
        }


        // even-width modifier for horizontal orientation
        &.expanded {
            @include menu-expand;
        }


        // vertical orientation modifier
        &.vertical {
            @include menu-direction(vertical);
        }


        @include each-breakpoint($small: false) {
            &.#{$size}-horizontal {
                @include menu-direction(horizontal);
            }
            &.#{$size}-expanded {
                @include menu-expand;
            }
            &.#{$size}-vertical {
                @include menu-direction(vertical);
            }
        }


        // simple
        &.simple {
            @include menu-simple;
            &.align-#{$global-right} {
                @include menu-simple-direction($global-right);
            }
        }


        // align right
        &.align-#{$global-right} {
            @if $global-flexbox {
                justify-content: flex-end;
            }
            @else {
                @include clearfix;
                > li {
                    float: $global-right;
                }
            }
        }

        // vertical icons
        &.icon-top {
            @include menu-icons(top, $base: false);


            // make vertical menu with icons on top work
            &.vertical {
                a > span {
                    margin: auto;
                }
            }
        }


        // nesting
        &.nested {
            @include menu-nested;
        }


        // active state
        .active > a {
          background: $menu-item-background-active;
          color: $menu-item-color-active;
        }


        // menu with border
        &.menu-bordered {
          li {
            border: 1px solid $menu-border;
            &:not(:first-child) {
              border-top: 0;
            }
          }
        }

        // Menu with background hover
        &.menu-hover {
          li:hover {
            background-color: $menu-item-background-hover;
          }
        }
    }
    .menu-text {
        @include menu-text;
    }


    // align center
    .menu-centered {
        text-align: center;
        > .menu {
            @if $global-flexbox {
                @include flex-align($x: center, $y: top);
            }
            @else {
                display: inline-block;
                vertical-align: top;
            }
        }
    }


    // prevent responsive
    .no-js [data-responsive-menu] ul {
        display: none;
    }
}